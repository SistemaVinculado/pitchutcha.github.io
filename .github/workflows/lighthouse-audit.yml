# Nome do Workflow
name: Auditoria Lighthouse

# Gatilhos: Roda toda segunda-feira às 8h da manhã ou manualmente
on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * 1'

jobs:
  lighthouse-audit:
    name: Rodar Auditoria Lighthouse
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permissão para fazer commit no repositório

    steps:
      # 1. Faz o checkout do código
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Cria um arquivo de configuração para o Lighthouse ser mais flexível
      - name: Criar Configuração do Lighthouse
        run: |
          echo '{
            "ci": {
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", { "minScore": 0.7 }],
                  "categories:accessibility": ["warn", { "minScore": 0.8 }],
                  "categories:best-practices": ["warn", { "minScore": 0.8 }],
                  "categories:seo": ["warn", { "minScore": 0.7 }]
                }
              }
            }
          }' > ./.lighthouserc.json

      # 3. Roda a auditoria do Lighthouse no site publicado
      - name: Rodar Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            https://sistemavinculado.github.io/pitchutcha.github.io/
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './.lighthouserc.json'

      # 4. Processa o relatório JSON para extrair apenas os dados que queremos
      - name: Processar o Relatório Lighthouse
        id: process_report
        run: |
          # O nome do arquivo de relatório pode variar um pouco, então usamos um coringa (*)
          REPORT_PATH=$(ls .lighthouseci/lhr-*.json | head -n 1)
          
          PROCESSED_JSON=$(jq '{
            scores: {
              performance: (.categories.performance.score * 100 | round),
              accessibility: (.categories.accessibility.score * 100 | round),
              bestPractices: (.categories."best-practices".score * 100 | round),
              seo: (.categories.seo.score * 100 | round)
            },
            metrics: {
              fcp: .audits["first-contentful-paint"].displayValue,
              lcp: .audits["largest-contentful-paint"].displayValue,
              tbt: .audits["total-blocking-time"].displayValue,
              cls: .audits["cumulative-layout-shift"].displayValue,
              si: .audits["speed-index"].displayValue
            },
            opportunities: [
              .audits.opportunities.details.items[]? | 
              select(.overallSavingsMs > 0) | 
              {title: .title, savings: (.overallSavingsMs / 1000 | tostring + " s")}
            ] | .[:3]
          }' $REPORT_PATH)
          
          echo $PROCESSED_JSON > ./docs/pagespeed-data.json

      # 5. Faz o commit do novo arquivo de dados de volta para o repositório
      - name: Fazer commit do arquivo pagespeed-data.json
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Atualiza os dados de auditoria do Lighthouse"
          file_pattern: "docs/pagespeed-data.json"
